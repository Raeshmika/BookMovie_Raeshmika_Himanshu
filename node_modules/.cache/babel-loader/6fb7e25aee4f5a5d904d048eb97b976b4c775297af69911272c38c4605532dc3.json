{"ast":null,"code":"var _jsxFileName = \"/home/user9672/ReactJs/Assignments/BookMovieApp/src/screens/details/Details.js\";\nimport React, { Component } from 'react';\nimport Header from '../../common/header/Header';\nimport Typography from '@material-ui/core/Typography';\nimport './Details.css';\nimport YouTube from 'react-youtube';\nimport ImageList from '@material-ui/core/ImageList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Details extends Component {\n  constructor() {\n    super();\n    this.artistClickHandler = url => {\n      window.location = url;\n    };\n    this.starClickHandler = id => {\n      let starIconList = [];\n      for (let star of this.state.starIcons) {\n        let starNode = star;\n        if (star.id <= id) {\n          starNode.color = \"yellow\";\n        } else {\n          starNode.color = \"black\";\n        }\n        starIconList.push(starNode);\n      }\n      this.setState({\n        starIcons: starIconList\n      });\n    };\n    this.state = {\n      movie: {\n        genres: [],\n        trailer_url: \"\",\n        artists: []\n      },\n      starIcons: [{\n        id: 1,\n        stateId: \"star1\",\n        color: \"black\"\n      }, {\n        id: 2,\n        stateId: \"star2\",\n        color: \"black\"\n      }, {\n        id: 3,\n        stateId: \"star3\",\n        color: \"black\"\n      }, {\n        id: 4,\n        stateId: \"star4\",\n        color: \"black\"\n      }, {\n        id: 5,\n        stateId: \"star5\",\n        color: \"black\"\n      }]\n    };\n  }\n  componentWillMount() {\n    let that = this;\n    let dataMovie = null;\n    let xhrMovie = new XMLHttpRequest();\n    xhrMovie.addEventListener(\"readystatechange\", function () {\n      if (this.readyState === 4) {\n        that.setState({\n          movie: JSON.parse(this.responseText)\n        });\n      }\n    });\n    xhrMovie.open(\"GET\", this.props.baseUrl + \"movies/\" + this.props.match.params.id);\n    xhrMovie.send(dataMovie);\n  }\n  render() {\n    let movie = this.state.movie;\n    const opts = {\n      height: '300',\n      width: '700',\n      playerVars: {\n        autoplay: 1\n      }\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Hiii\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default Details;","map":{"version":3,"names":["React","Component","Header","Typography","YouTube","ImageList","GridListTile","GridListTileBar","StarBorderIcon","Link","Details","constructor","artistClickHandler","url","window","location","starClickHandler","id","starIconList","star","state","starIcons","starNode","color","push","setState","movie","genres","trailer_url","artists","stateId","componentWillMount","that","dataMovie","xhrMovie","XMLHttpRequest","addEventListener","readyState","JSON","parse","responseText","open","props","baseUrl","match","params","send","render","opts","height","width","playerVars","autoplay"],"sources":["/home/user9672/ReactJs/Assignments/BookMovieApp/src/screens/details/Details.js"],"sourcesContent":["import React, { Component } from 'react';\nimport Header from '../../common/header/Header';\nimport Typography from '@material-ui/core/Typography';\nimport './Details.css';\nimport YouTube from 'react-youtube';\nimport ImageList from '@material-ui/core/ImageList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\nimport { Link } from 'react-router-dom';\n\n\nclass Details extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            movie: {\n                genres: [],\n                trailer_url: \"\",\n                artists: []\n            },\n            starIcons: [{\n                id: 1,\n                stateId: \"star1\",\n                color: \"black\"\n            },\n            {\n                id: 2,\n                stateId: \"star2\",\n                color: \"black\"\n            },\n            {\n                id: 3,\n                stateId: \"star3\",\n                color: \"black\"\n            },\n            {\n                id: 4,\n                stateId: \"star4\",\n                color: \"black\"\n            },\n            {\n                id: 5,\n                stateId: \"star5\",\n                color: \"black\"\n            }]\n        }\n    }\n\n    componentWillMount() {\n        let that = this;\n        let dataMovie = null;\n        let xhrMovie = new XMLHttpRequest();\n        xhrMovie.addEventListener(\"readystatechange\", function () {\n            if (this.readyState === 4) {\n                that.setState({ movie: JSON.parse(this.responseText) });\n            }\n        })\n\n        xhrMovie.open(\"GET\", this.props.baseUrl + \"movies/\" + this.props.match.params.id);\n        xhrMovie.send(dataMovie);\n\n    }\n\n\n    artistClickHandler = (url) => {\n        window.location = url;\n    }\n\n    starClickHandler = (id) => {\n        let starIconList = [];\n        for (let star of this.state.starIcons) {\n            let starNode = star;\n            if (star.id <= id) {\n                starNode.color = \"yellow\"\n            }\n            else {\n                starNode.color = \"black\";\n\n            }\n            starIconList.push(starNode);\n        }\n        this.setState({ starIcons: starIconList });\n    }\n\n    render() {\n        let movie = this.state.movie;\n        const opts = {\n            height: '300',\n            width: '700',\n            playerVars: {\n                autoplay: 1\n            }\n        }\n        return (\n            <div>\n                Hiii\n            </div>\n        );\n    }\n}\n\nexport default Details;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}